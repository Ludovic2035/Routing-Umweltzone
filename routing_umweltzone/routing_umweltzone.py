# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RoutingUmweltzone
                                 A QGIS plugin
 Routing außerhalb von Umweltzonen
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-02
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Ludovic Tane
        email                : ludovic.tane@stud.hs-bochum.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.gui import (
    QgsOptionsWidgetFactory,
    QgsOptionsPageWidget
)
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QFont, QColor
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QHBoxLayout ,QApplication, QDialog
from qgis.core import QgsPalLayerSettings, QgsTextFormat, QgsTextBufferSettings, QgsVectorLayerSimpleLabeling, QgsVectorLayer,  QgsProject, QgsRasterLayer

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .routing_umweltzone_dialog import RoutingUmweltzoneDialog
import os.path
import os, sys
import requests
"""
#jdfjajdshjfhjdhdksfjdtfzuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
from PyQt5 import QtCore, QtGui, QtWidgets
from .routing_umweltzone_dialog import RoutingUmweltzoneDialog
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QFont, QColor
from qgis.PyQt.QtWidgets import QAction

from qgis.core import QgsPalLayerSettings, QgsTextFormat, QgsTextBufferSettings, QgsVectorLayerSimpleLabeling, QgsVectorLayer, QgsProject, QgsFeature, QgsGeometry, QgsLineSymbol

# Initialize Qt resources from file resources.py
from .resources import *
import os
import requests
import json
#import decoder
import matplotlib
import colorsys


def decode_polyline(polyline, is3d=False):
    """Decodes a Polyline string into a GeoJSON geometry.
    :param polyline: An encoded polyline, only the geometry.
    :type polyline: string
    :param is3d: Specifies if geometry contains Z component.
    :type is3d: boolean
    :returns: GeoJSON Linestring geometry
    :rtype: dict
    """
    points = []
    index = lat = lng = z = 0

    while index < len(polyline):
        result = 1
        shift = 0
        while True:
            b = ord(polyline[index]) - 63 - 1
            index += 1
            result += b << shift
            shift += 5
            if b < 0x1F:
                break
        lat += (~result >> 1) if (result & 1) != 0 else (result >> 1)

        result = 1
        shift = 0
        while True:
            b = ord(polyline[index]) - 63 - 1
            index += 1
            result += b << shift
            shift += 5
            if b < 0x1F:
                break
        lng += ~(result >> 1) if (result & 1) != 0 else (result >> 1)

        if is3d:
            result = 1
            shift = 0
            while True:
                b = ord(polyline[index]) - 63 - 1
                index += 1
                result += b << shift
                shift += 5
                if b < 0x1F:
                    break
            if (result & 1) != 0:
                z += ~(result >> 1)
            else:
                z += result >> 1

            points.append(
                [
                    round(lng * 1e-5, 6),
                    round(lat * 1e-5, 6),
                    round(z * 1e-2, 1),
                ]
            )

        else:
            points.append([round(lng * 1e-5, 6), round(lat * 1e-5, 6)])

    geojson = {u"type": u"LineString", u"coordinates": points}
    
    
    #um '' in "" zu ersetzen, da wurde nicht in Qgis gelesen
    return json.dumps(geojson)



class RoutingUmweltzone:
    """QGIS Plugin Implementation."""
    
    
    #Dialog
    
    

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RoutingUmweltzone_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Routing Umweltzone')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RoutingUmweltzone', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
        
    
        
    
        

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/routing_umweltzone/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Routing Umweltzone'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Routing Umweltzone'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RoutingUmweltzoneDialog()
        def startpunkt():
            limit =1 #höchste Anzahl der Ergebnisse
                
          
               
            sp_address = self.dlg.startRouting.text()
                #nominatim
            url="https://nominatim.openstreetmap.org/search?q="+sp_address+"&format=geojson&countrycodes=DE&point_geojson=1&limit="+str(limit)
               

            request=requests.get(url).text
                
            vlayer1=QgsVectorLayer(request,sp_address,"ogr")
            
            #die Koordinaten des Punktes nehmen
            for feature in vlayer1.getFeatures():
                self.dlg.startKoordinaten.setText(feature.geometry().asWkt().replace("Point","").strip(" ()"))
            QgsProject.instance().addMapLayers([vlayer1])
        def zielpunkt():
            limit =1 #höchste Anzahl der Ergebnisse
            
            zp_address = self.dlg.zielRouting.text()
            url="https://nominatim.openstreetmap.org/search?q="+zp_address+"&format=geojson&countrycodes=DE&point_geojson=1&limit="+str(limit)
            request=requests.get(url).text
            vlayer2=QgsVectorLayer(request,zp_address,"ogr")
            
            #die Koordinaten des Punktes nehmen
            for feature in vlayer2.getFeatures():
                self.dlg.zielKoordinaten.setText(feature.geometry().asWkt().replace("Point","").strip(" ()")) #Mit strip-Funktion  in einer bestimmte Format die Geometrie extrahieren 
            QgsProject.instance().addMapLayers([vlayer2])
            #win=self.iface.mainWindow()
        
            
        self.dlg.pushButton.clicked.connect(startpunkt)
        self.dlg.pushButton2.clicked.connect(zielpunkt)        

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
    
            
        if result:
            
          
            
            zp_address = self.dlg.zielRouting.text()
            sp_address = self.dlg.startRouting.text()
            print('von '+str(sp_address) + ' nach ' + str(zp_address))
            
            # Koordinaten extrahieren und anzeigen lassen
            startString=self.dlg.startKoordinaten.text()
            zielString=self.dlg.zielKoordinaten.text()
            
            
            startFloat = []
            for coord in startString.split(" "):
                startFloat.append(float(coord))
            zielFloat = []
            for coord in zielString.split(" "):
                zielFloat.append(float(coord))
            
            
            #Authentifikation mit API-Key
            headers = {
                'Accept': 'application/geo+json, application/json, application/gpx+xml, img/png; charset=utf-8',
                'Authorization': '5b3ce3597851110001cf6248fde28c8c1daa4afe8aaa2bcae9a3b510', #my API-Key
                'Content-Type': 'application/json; charset=utf-8'
            }
            umweltzone = [[[6.080711333278182,50.799952520513365],[6.079054317708473,50.79961249356518],[6.077729020920599,50.79956088948737],[6.074789736998334,50.80014016359112],[6.074764070670049,50.79967647633861],[6.074761392630587,50.79801171086301],[6.074793254770841,50.796800917496434],[6.074844813187869,50.795544981332036],[6.074441671691223,50.79466269305286],[6.07361013392006,50.793763685493076],[6.072451255651787,50.79327284370612],[6.07088373807522,50.79243783447143],[6.06994879379596,50.79193334525973],[6.069508532069152,50.79156780740602],[6.069040672281007,50.791045588540044],[6.0686826090583,50.79048851125583],[6.068379955438142,50.79014032784962],[6.067885001015115,50.789949042455135],[6.067786501734255,50.78978242549722],[6.067815985078257,50.78890561262359],[6.067631184702384,50.78867189072157],[6.067232269638652,50.78912027539219],[6.066894868739922,50.78964656645574],[6.066786129082658,50.79000200435872],[6.066539258053488,50.7903678602424],[6.066348597391685,50.79151743207284],[6.066284025289759,50.792335829274776],[6.063801736895894,50.79206240187963],[6.062469640718579,50.79182867048616],[6.061359794470598,50.79175887361467],[6.060872765732808,50.79171526009961],[6.060473023683806,50.79159860003492],[6.060288274633182,50.79138437489912],[6.060195769575681,50.79113108479052],[6.060195440893799,50.79087774658657],[6.06037978191694,50.79078028858143],[6.060467160634437,50.79051054266038],[6.060192187872099,50.790353900584684],[6.059834863944439,50.79028441372946],[6.059560207740593,50.79037166889448],[6.058708684780041,50.7904940095094],[6.057967008773142,50.790720752674495],[6.057445538841955,50.79119128059254],[6.057307903642004,50.79151085380888],[6.056068933176825,50.791151952058094],[6.054995603497958,50.79068354991014],[6.054255307764408,50.79030865756353],[6.05314459542118,50.78944163893961],[6.052996306215135,50.78916031990983],[6.052625745607235,50.78864464288254],[6.051983678370915,50.787160233861094],[6.051957437665632,50.78639393702331],[6.051882349977407,50.78545604269555],[6.051952415839123,50.781915382735065],[6.051950470537501,50.78018021958742],[6.052023222964169,50.77914849168352],[6.051985426720831,50.77839811135542],[6.051947500295189,50.777530501028615],[6.051724892924234,50.77694445134551],[6.051242989530922,50.775889506929374],[6.05061362197135,50.775233243147355],[6.050279778849383,50.7748077113322],[6.049280822187502,50.77382688094726],[6.048688687665779,50.773498816733834],[6.047980878816866,50.77290729985872],[6.047180849395703,50.7719886690807],[6.046923154152434,50.771653805663504],[6.04692673343343,50.77126291743661],[6.047169413499192,50.77040435963785],[6.047447539685355,50.76980137341041],[6.048061774643225,50.769508852538635],[6.047878035560626,50.77013247814858],[6.049691222241117,50.769984183728],[6.049444726600157,50.76974209813563],[6.0493038875649,50.76946041067151],[6.050979128210558,50.769357734662286],[6.054031259600763,50.76919632200201],[6.056555549819802,50.76909316503225],[6.057473574968028,50.76916553079037],[6.058112645580039,50.76887519208617],[6.058551700065179,50.76880116197182],[6.059171462219275,50.768873575380546],[6.059722361035036,50.76894611103821],[6.060433719135239,50.76887292156871],[6.060915506296859,50.76875624738997],[6.061513781251421,50.768404509557605],[6.061845904846567,50.76793541161216],[6.061882225639177,50.767466381649534],[6.061659627792456,50.766856885880834],[6.061251461817389,50.76577847755531],[6.060991604248678,50.765004841848544],[6.060989633662393,50.76350413424096],[6.061085884029556,50.76291002091131],[6.061247318692766,50.76263645808308],[6.061616710792371,50.76235478310308],[6.062183749457847,50.76213772905818],[6.063575122285414,50.76162678621305],[6.065644476585598,50.76094571134087],[6.066161788997428,50.76080472198488],[6.065828696486569,50.76052352354338],[6.063607954938704,50.758625438581966],[6.064642361230776,50.7581324790012],[6.065528911821175,50.75766305819596],[6.066193571054082,50.75709990170958],[6.066783988350349,50.756372625810755],[6.067263225269658,50.755481342969084],[6.067816841447697,50.75487140335923],[6.06851825173675,50.75430821177222],[6.06958942230354,50.75372132985323],[6.070106148650356,50.75325209589966],[6.070290404481583,50.752900202773354],[6.070622198465222,50.752266920136655],[6.07076937106958,50.75182137233776],[6.071581542589614,50.751211166014144],[6.071950855461617,50.75097647582875],[6.072800442319882,50.7506945549654],[6.073391416047814,50.75043616646948],[6.074093407291114,50.75024818605071],[6.075238994719103,50.75017705433922],[6.076052422171539,50.75031721704121],[6.077124611056207,50.75052759411637],[6.078141480004381,50.75070923047711],[6.079124402885951,50.75078650648034],[6.080007763693675,50.75066633124716],[6.080931434614649,50.750407763968724],[6.081633401495106,50.7502900405215],[6.082520505852147,50.75031278571654],[6.083444752934946,50.75045281781108],[6.084332200942039,50.75066326163311],[6.084960726670472,50.75078003264621],[6.085441268721326,50.75075621497303],[6.086438614829231,50.75047408560502],[6.087103710083824,50.75033289266288],[6.087916837575153,50.75035574232857],[6.088619393309685,50.75049590149359],[6.089063329776068,50.750706557918406],[6.089618454419396,50.75105791115902],[6.089877640141281,50.75133909949931],[6.0903221354035,50.75183113980768],[6.09069281897666,50.752346700268774],[6.090878039474747,50.7525107137382],[6.091359030740081,50.75276826043173],[6.091876637664738,50.75286161748713],[6.092504886035818,50.75281427931671],[6.094574429737671,50.75262498586142],[6.096052747886089,50.75253000351454],[6.097272292204816,50.75243513000506],[6.097494175473079,50.75245840763983],[6.098233823580339,50.75264540579347],[6.09901051071874,50.75287920586664],[6.099898275044834,50.753183297304105],[6.100600807585784,50.75327645611826],[6.101428288829023,50.75347747213768],[6.102117094345112,50.75365028580866],[6.102709389222265,50.75404838208789],[6.10322765537385,50.754423077202304],[6.104080476531763,50.75559479888465],[6.10467333864274,50.75622734538071],[6.105191908867038,50.75671926176297],[6.106191034000549,50.75716389850286],[6.107411811747559,50.75756139345256],[6.110445688583967,50.75863717127243],[6.111111435987484,50.75880069389607],[6.111887843834827,50.75879994756201],[6.11318173685823,50.75884562040842],[6.113958257445017,50.758938626490966],[6.114809467326111,50.75931294232748],[6.116512864508056,50.76043679927974],[6.11769799795134,50.761279679423254],[6.119623600446234,50.76252049529061],[6.120771359039924,50.76319931401239],[6.121475059054997,50.76366750063328],[6.122807696868334,50.76429926736767],[6.12339974370474,50.76448617182608],[6.124028800844487,50.764696587660936],[6.125323677124018,50.764999959399724],[6.125842308064878,50.765398017048234],[6.126621187964488,50.76631163772368],[6.127325504744113,50.76696741043987],[6.12854826596581,50.76792745832429],[6.129510983169198,50.768442237052355],[6.131325032037506,50.76921397225978],[6.132695106886915,50.769915885306716],[6.133916037183316,50.77017240782543],[6.136209072209846,50.77035727284335],[6.137281691129013,50.770426401726674],[6.137985200959863,50.770777258338086],[6.13939220641058,50.77138528257225],[6.141754068529607,50.77260812575063],[6.142984738093398,50.77325677676389],[6.143689820854279,50.77405314314798],[6.143951309480525,50.77489698377784],[6.143841567303387,50.77529573790895],[6.14343655213784,50.77588238904569],[6.142218992106177,50.77679835250977],[6.14133327518475,50.77740913768783],[6.140570983213332,50.77769504682661],[6.138328113361584,50.77787313545443],[6.136268788363179,50.77811866063035],[6.13519672325253,50.778260607717826],[6.134396696788878,50.77861817090652],[6.133793867178625,50.77915323439199],[6.13301931168105,50.77988105795103],[6.132502389987708,50.78016303683851],[6.130469131289952,50.78078538151754],[6.129210576923636,50.781351901990156],[6.127921911105419,50.782208100558265],[6.12711007573036,50.78291246155914],[6.126372185237773,50.78359327238873],[6.125302232121621,50.78457928893581],[6.123805946814999,50.78346298543593],[6.122674838888591,50.7826948203376],[6.121459398332685,50.781998203150835],[6.12063983686123,50.78160538480766],[6.119425004631336,50.781123517367085],[6.118069267651185,50.780731321338436],[6.116883161858634,50.780446189795434],[6.115302083765972,50.780232999945035],[6.114455255077099,50.78018016792592],[6.113410905078542,50.78012752300424],[6.110899046322026,50.78014784146087],[6.109741973670571,50.78014894184858],[6.109318374198552,50.78004200092331],[6.108979194943288,50.77982763826857],[6.108526965871207,50.77957751024523],[6.107990605063782,50.77950645024372],[6.107398132276924,50.77959645111467],[6.107031643765853,50.779757801256],[6.106721848704711,50.78006230919121],[6.106666223240055,50.78043814340528],[6.106836301593072,50.78076009943864],[6.107062580966498,50.780956682411],[6.107486307314101,50.78111730183621],[6.108050904647166,50.78115255754802],[6.108558682965387,50.78104474254013],[6.108840505377717,50.78088346711276],[6.109178979467554,50.78079369828486],[6.10996920057594,50.78079295183669],[6.111521532264468,50.78077357975801],[6.112904361086866,50.780736461947825],[6.114061608814605,50.78075322017284],[6.115614219587282,50.78089480469489],[6.116743573552969,50.78107257544069],[6.11781670214241,50.78130415269071],[6.118890069083836,50.781625080653505],[6.119850613835093,50.781999875630646],[6.120641780573087,50.78235694872157],[6.121687565465122,50.782892651191666],[6.123016366381526,50.78376804722752],[6.124762117059896,50.78501588661614],[6.123530598873407,50.78601149970026],[6.122461084810028,50.78720848493011],[6.121613281056498,50.78835830013131],[6.120516286035192,50.78928083074708],[6.118947325356845,50.79036466683695],[6.118000057113365,50.79086377027064],[6.118869094780381,50.79156716071006],[6.118625873585468,50.79183171580119],[6.116039643107372,50.79319424887568],[6.113970574450414,50.79427492022774],[6.112640376112993,50.794956223001364],[6.10961039759685,50.79645982604406],[6.107245644619008,50.79779857945794],[6.105508708816592,50.79869117099032],[6.101735473413316,50.794958658246934],[6.100765646379803,50.794026073093214],[6.100176542766349,50.793435490797236],[6.096889339814914,50.79413941488408],[6.09673115427802,50.79407068356282],[6.096513205680823,50.79372654809552],[6.096126553501859,50.793032031951654],[6.09563301604184,50.7931450849304],[6.095028196193055,50.7919812867675],[6.093853412903607,50.79222011954598],[6.094816191714619,50.79420082278371],[6.096093429590869,50.793929981005896],[6.096378486675706,50.79431262858129],[6.096607781254944,50.79437330003744],[6.09882466664061,50.79396247625575],[6.098993053735893,50.794206411190615],[6.098756459709873,50.79440070711837],[6.098806370831588,50.794657329163705],[6.099300727360616,50.794869700169215],[6.099737105116581,50.795702159339875],[6.100045213362044,50.7960136671187],[6.100476405423091,50.796383502477084],[6.101677238553724,50.79722023376859],[6.102324028212225,50.797784776143445],[6.102971208611854,50.79846609459191],[6.103002882607423,50.798875291094625],[6.094330097319505,50.79903460244962],[6.095330209260177,50.800256333585885],[6.095414495505248,50.80096485547684],[6.094960838854201,50.80185748466561],[6.092354108713203,50.80306676682941],[6.091544547862552,50.8037171155828],[6.087943479769376,50.80360645089371],[6.08461288428781,50.80339793641987],[6.082442290776656,50.80331472626276],[6.081832331195488,50.80157883235116],[6.081208583676616,50.800162089169056],[6.080711333278182,50.799952520513365]]]
             
            #API openrouteservice mit  PKW-Profil  
            body1 = {"coordinates":[startFloat,zielFloat],"geometry_simplify":"true","options":{"avoid_polygons":{"type":"Polygon","coordinates":umweltzone}},"geometry":"true"}
            base_url = 'https://api.openrouteservice.org/v2/directions/'
            if self.dlg.comboBoxProfil.currentText() == "PKW":
                url= base_url+'driving-car'
                layer_name = "Route-Pkw Layer"
               
            else:
                url= base_url+'driving-hgv'
                layer_name = "Route-Lkw Layer"
                
            
                
            call = requests.post(url, json=body1, headers=headers)

            #print(call.status_code, call.reason)
            #print(call.text)
            call_dict = json.loads(call.text) #Convert from JSON to Python mit  json.loads() 
                                              # von Python zu JSON mit json.dumps()
           
            with open(self.plugin_dir + "/route.json", "w") as f:
                print("CODE ROUTE",decode_polyline(call_dict["routes"][0]["geometry"]))
                f.write(decode_polyline(call_dict["routes"][0]["geometry"]))
            layer = self.iface.addVectorLayer(self.plugin_dir + "/route.json", layer_name,"ogr")
           
            
            
            
            
            #Die Route formatieren??
            layer.renderer().symbol().setWidth(2)
            
            if layer_name == "Route-Lkw Layer":
                
                layer.renderer().symbol().setColor(QColor("grey"))
            else:
                layer.renderer().symbol().setColor(QColor("red"))
            layer.triggerRepaint()
            """
            #
            #API openrouteservice mit LKW-Profil, LKW als Hgv
            
            body2 = {"coordinates":[[startFloat,zielFloat]],"options":{"avoid_polygons":{"type":"Polygon","coordinates":[[[6.080711333278182,50.799952520513365],[6.079054317708473,50.79961249356518],[6.077729020920599,50.79956088948737],[6.074789736998334,50.80014016359112],[6.074764070670049,50.79967647633861],[6.074761392630587,50.79801171086301],[6.074793254770841,50.796800917496434],[6.074844813187869,50.795544981332036],[6.074441671691223,50.79466269305286],[6.07361013392006,50.793763685493076],[6.072451255651787,50.79327284370612],[6.07088373807522,50.79243783447143],[6.06994879379596,50.79193334525973],[6.069508532069152,50.79156780740602],[6.069040672281007,50.791045588540044],[6.0686826090583,50.79048851125583],[6.068379955438142,50.79014032784962],[6.067885001015115,50.789949042455135],[6.067786501734255,50.78978242549722],[6.067815985078257,50.78890561262359],[6.067631184702384,50.78867189072157],[6.067232269638652,50.78912027539219],[6.066894868739922,50.78964656645574],[6.066786129082658,50.79000200435872],[6.066539258053488,50.7903678602424],[6.066348597391685,50.79151743207284],[6.066284025289759,50.792335829274776],[6.063801736895894,50.79206240187963],[6.062469640718579,50.79182867048616],[6.061359794470598,50.79175887361467],[6.060872765732808,50.79171526009961],[6.060473023683806,50.79159860003492],[6.060288274633182,50.79138437489912],[6.060195769575681,50.79113108479052],[6.060195440893799,50.79087774658657],[6.06037978191694,50.79078028858143],[6.060467160634437,50.79051054266038],[6.060192187872099,50.790353900584684],[6.059834863944439,50.79028441372946],[6.059560207740593,50.79037166889448],[6.058708684780041,50.7904940095094],[6.057967008773142,50.790720752674495],[6.057445538841955,50.79119128059254],[6.057307903642004,50.79151085380888],[6.056068933176825,50.791151952058094],[6.054995603497958,50.79068354991014],[6.054255307764408,50.79030865756353],[6.05314459542118,50.78944163893961],[6.052996306215135,50.78916031990983],[6.052625745607235,50.78864464288254],[6.051983678370915,50.787160233861094],[6.051957437665632,50.78639393702331],[6.051882349977407,50.78545604269555],[6.051952415839123,50.781915382735065],[6.051950470537501,50.78018021958742],[6.052023222964169,50.77914849168352],[6.051985426720831,50.77839811135542],[6.051947500295189,50.777530501028615],[6.051724892924234,50.77694445134551],[6.051242989530922,50.775889506929374],[6.05061362197135,50.775233243147355],[6.050279778849383,50.7748077113322],[6.049280822187502,50.77382688094726],[6.048688687665779,50.773498816733834],[6.047980878816866,50.77290729985872],[6.047180849395703,50.7719886690807],[6.046923154152434,50.771653805663504],[6.04692673343343,50.77126291743661],[6.047169413499192,50.77040435963785],[6.047447539685355,50.76980137341041],[6.048061774643225,50.769508852538635],[6.047878035560626,50.77013247814858],[6.049691222241117,50.769984183728],[6.049444726600157,50.76974209813563],[6.0493038875649,50.76946041067151],[6.050979128210558,50.769357734662286],[6.054031259600763,50.76919632200201],[6.056555549819802,50.76909316503225],[6.057473574968028,50.76916553079037],[6.058112645580039,50.76887519208617],[6.058551700065179,50.76880116197182],[6.059171462219275,50.768873575380546],[6.059722361035036,50.76894611103821],[6.060433719135239,50.76887292156871],[6.060915506296859,50.76875624738997],[6.061513781251421,50.768404509557605],[6.061845904846567,50.76793541161216],[6.061882225639177,50.767466381649534],[6.061659627792456,50.766856885880834],[6.061251461817389,50.76577847755531],[6.060991604248678,50.765004841848544],[6.060989633662393,50.76350413424096],[6.061085884029556,50.76291002091131],[6.061247318692766,50.76263645808308],[6.061616710792371,50.76235478310308],[6.062183749457847,50.76213772905818],[6.063575122285414,50.76162678621305],[6.065644476585598,50.76094571134087],[6.066161788997428,50.76080472198488],[6.065828696486569,50.76052352354338],[6.063607954938704,50.758625438581966],[6.064642361230776,50.7581324790012],[6.065528911821175,50.75766305819596],[6.066193571054082,50.75709990170958],[6.066783988350349,50.756372625810755],[6.067263225269658,50.755481342969084],[6.067816841447697,50.75487140335923],[6.06851825173675,50.75430821177222],[6.06958942230354,50.75372132985323],[6.070106148650356,50.75325209589966],[6.070290404481583,50.752900202773354],[6.070622198465222,50.752266920136655],[6.07076937106958,50.75182137233776],[6.071581542589614,50.751211166014144],[6.071950855461617,50.75097647582875],[6.072800442319882,50.7506945549654],[6.073391416047814,50.75043616646948],[6.074093407291114,50.75024818605071],[6.075238994719103,50.75017705433922],[6.076052422171539,50.75031721704121],[6.077124611056207,50.75052759411637],[6.078141480004381,50.75070923047711],[6.079124402885951,50.75078650648034],[6.080007763693675,50.75066633124716],[6.080931434614649,50.750407763968724],[6.081633401495106,50.7502900405215],[6.082520505852147,50.75031278571654],[6.083444752934946,50.75045281781108],[6.084332200942039,50.75066326163311],[6.084960726670472,50.75078003264621],[6.085441268721326,50.75075621497303],[6.086438614829231,50.75047408560502],[6.087103710083824,50.75033289266288],[6.087916837575153,50.75035574232857],[6.088619393309685,50.75049590149359],[6.089063329776068,50.750706557918406],[6.089618454419396,50.75105791115902],[6.089877640141281,50.75133909949931],[6.0903221354035,50.75183113980768],[6.09069281897666,50.752346700268774],[6.090878039474747,50.7525107137382],[6.091359030740081,50.75276826043173],[6.091876637664738,50.75286161748713],[6.092504886035818,50.75281427931671],[6.094574429737671,50.75262498586142],[6.096052747886089,50.75253000351454],[6.097272292204816,50.75243513000506],[6.097494175473079,50.75245840763983],[6.098233823580339,50.75264540579347],[6.09901051071874,50.75287920586664],[6.099898275044834,50.753183297304105],[6.100600807585784,50.75327645611826],[6.101428288829023,50.75347747213768],[6.102117094345112,50.75365028580866],[6.102709389222265,50.75404838208789],[6.10322765537385,50.754423077202304],[6.104080476531763,50.75559479888465],[6.10467333864274,50.75622734538071],[6.105191908867038,50.75671926176297],[6.106191034000549,50.75716389850286],[6.107411811747559,50.75756139345256],[6.110445688583967,50.75863717127243],[6.111111435987484,50.75880069389607],[6.111887843834827,50.75879994756201],[6.11318173685823,50.75884562040842],[6.113958257445017,50.758938626490966],[6.114809467326111,50.75931294232748],[6.116512864508056,50.76043679927974],[6.11769799795134,50.761279679423254],[6.119623600446234,50.76252049529061],[6.120771359039924,50.76319931401239],[6.121475059054997,50.76366750063328],[6.122807696868334,50.76429926736767],[6.12339974370474,50.76448617182608],[6.124028800844487,50.764696587660936],[6.125323677124018,50.764999959399724],[6.125842308064878,50.765398017048234],[6.126621187964488,50.76631163772368],[6.127325504744113,50.76696741043987],[6.12854826596581,50.76792745832429],[6.129510983169198,50.768442237052355],[6.131325032037506,50.76921397225978],[6.132695106886915,50.769915885306716],[6.133916037183316,50.77017240782543],[6.136209072209846,50.77035727284335],[6.137281691129013,50.770426401726674],[6.137985200959863,50.770777258338086],[6.13939220641058,50.77138528257225],[6.141754068529607,50.77260812575063],[6.142984738093398,50.77325677676389],[6.143689820854279,50.77405314314798],[6.143951309480525,50.77489698377784],[6.143841567303387,50.77529573790895],[6.14343655213784,50.77588238904569],[6.142218992106177,50.77679835250977],[6.14133327518475,50.77740913768783],[6.140570983213332,50.77769504682661],[6.138328113361584,50.77787313545443],[6.136268788363179,50.77811866063035],[6.13519672325253,50.778260607717826],[6.134396696788878,50.77861817090652],[6.133793867178625,50.77915323439199],[6.13301931168105,50.77988105795103],[6.132502389987708,50.78016303683851],[6.130469131289952,50.78078538151754],[6.129210576923636,50.781351901990156],[6.127921911105419,50.782208100558265],[6.12711007573036,50.78291246155914],[6.126372185237773,50.78359327238873],[6.125302232121621,50.78457928893581],[6.123805946814999,50.78346298543593],[6.122674838888591,50.7826948203376],[6.121459398332685,50.781998203150835],[6.12063983686123,50.78160538480766],[6.119425004631336,50.781123517367085],[6.118069267651185,50.780731321338436],[6.116883161858634,50.780446189795434],[6.115302083765972,50.780232999945035],[6.114455255077099,50.78018016792592],[6.113410905078542,50.78012752300424],[6.110899046322026,50.78014784146087],[6.109741973670571,50.78014894184858],[6.109318374198552,50.78004200092331],[6.108979194943288,50.77982763826857],[6.108526965871207,50.77957751024523],[6.107990605063782,50.77950645024372],[6.107398132276924,50.77959645111467],[6.107031643765853,50.779757801256],[6.106721848704711,50.78006230919121],[6.106666223240055,50.78043814340528],[6.106836301593072,50.78076009943864],[6.107062580966498,50.780956682411],[6.107486307314101,50.78111730183621],[6.108050904647166,50.78115255754802],[6.108558682965387,50.78104474254013],[6.108840505377717,50.78088346711276],[6.109178979467554,50.78079369828486],[6.10996920057594,50.78079295183669],[6.111521532264468,50.78077357975801],[6.112904361086866,50.780736461947825],[6.114061608814605,50.78075322017284],[6.115614219587282,50.78089480469489],[6.116743573552969,50.78107257544069],[6.11781670214241,50.78130415269071],[6.118890069083836,50.781625080653505],[6.119850613835093,50.781999875630646],[6.120641780573087,50.78235694872157],[6.121687565465122,50.782892651191666],[6.123016366381526,50.78376804722752],[6.124762117059896,50.78501588661614],[6.123530598873407,50.78601149970026],[6.122461084810028,50.78720848493011],[6.121613281056498,50.78835830013131],[6.120516286035192,50.78928083074708],[6.118947325356845,50.79036466683695],[6.118000057113365,50.79086377027064],[6.118869094780381,50.79156716071006],[6.118625873585468,50.79183171580119],[6.116039643107372,50.79319424887568],[6.113970574450414,50.79427492022774],[6.112640376112993,50.794956223001364],[6.10961039759685,50.79645982604406],[6.107245644619008,50.79779857945794],[6.105508708816592,50.79869117099032],[6.101735473413316,50.794958658246934],[6.100765646379803,50.794026073093214],[6.100176542766349,50.793435490797236],[6.096889339814914,50.79413941488408],[6.09673115427802,50.79407068356282],[6.096513205680823,50.79372654809552],[6.096126553501859,50.793032031951654],[6.09563301604184,50.7931450849304],[6.095028196193055,50.7919812867675],[6.093853412903607,50.79222011954598],[6.094816191714619,50.79420082278371],[6.096093429590869,50.793929981005896],[6.096378486675706,50.79431262858129],[6.096607781254944,50.79437330003744],[6.09882466664061,50.79396247625575],[6.098993053735893,50.794206411190615],[6.098756459709873,50.79440070711837],[6.098806370831588,50.794657329163705],[6.099300727360616,50.794869700169215],[6.099737105116581,50.795702159339875],[6.100045213362044,50.7960136671187],[6.100476405423091,50.796383502477084],[6.101677238553724,50.79722023376859],[6.102324028212225,50.797784776143445],[6.102971208611854,50.79846609459191],[6.103002882607423,50.798875291094625],[6.094330097319505,50.79903460244962],[6.095330209260177,50.800256333585885],[6.095414495505248,50.80096485547684],[6.094960838854201,50.80185748466561],[6.092354108713203,50.80306676682941],[6.091544547862552,50.8037171155828],[6.087943479769376,50.80360645089371],[6.08461288428781,50.80339793641987],[6.082442290776656,50.80331472626276],[6.081832331195488,50.80157883235116],[6.081208583676616,50.800162089169056],[6.080711333278182,50.799952520513365]]]}}}
            
            call2 = requests.post('https://api.openrouteservice.org/v2/directions/driving-hgv', json=body2, headers=headers)

            print(call2.status_code, call2.reason)
            print(call2.text)
            call_dict2 = json.loads(call2.text)
            
             with open(self.plugin_dir + "/route.json", "w") as f:
                f.write(decode_polyline(call_dict["routes"][0]["geometry"]))
            layer2 = self.iface.addVectorLayer(self.plugin_dir + "/route.json", "Route-Lkw Layer","ogr")
            
            
            #andere Möglichkeit mit if-else.
            #route auswählen
            if json == body1:
                call = requests.post('https://api.openrouteservice.org/v2/directions/driving-car', json=body1, headers=headers)
                print(call.status_code, call.reason)
                print(call.text)
                call_dict = json.loads(call.text)
                #Layer speichern und laden
                with open(self.plugin_dir + "/route.json", "w") as f:
                    f.write(decode_polyline(call_dict["routes"][0]["geometry"]))
                layer = self.iface.addVectorLayer(self.plugin_dir + "/route.json", "Route-Pkw Layer","ogr")

            else:
                call = requests.post('https://api.openrouteservice.org/v2/directions/driving-hgv', json=body2, headers=headers)
                print(call.status_code, call.reason)
                print(call.text)
                call_dict = json.loads(call.text)
                with open(self.plugin_dir + "/route.json", "w") as f:
                    f.write(decode_polyline(call_dict["routes"][0]["geometry"]))
                layer = self.iface.addVectorLayer(self.plugin_dir + "/route.json", "Route-Lkw Layer","ogr")
                """
                
                
            
            #Umwelzone Aachen
            with open(self.plugin_dir + "/umwelzone_aachen.json", "w") as file: #create a file with "w"
                #print("CODE UMWELTZONE",call_dict["metadata"]["query"]["options"]["avoid_polygons"]["coordinates"])
                jsonString = "{ \"type\": \"Polygon\",\"coordinates\":"+str(call_dict["metadata"]["query"]["options"]["avoid_polygons"]["coordinates"])+"}"
           
                file.write(jsonString)
            layer2 = self.iface.addVectorLayer(self.plugin_dir + "/umwelzone_aachen.json", "Umweltzone Aachen","ogr")
            #layer2.renderer().symbol().setWidth(2)
            layer2.renderer().symbol().setColor(QColor("green"))
            layer2.triggerRepaint()
            